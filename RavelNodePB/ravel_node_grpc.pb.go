// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package RavelNodePB

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RavelNodeClient is the client API for RavelNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RavelNodeClient interface {
	Join(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Void, error)
	Leave(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Void, error)
	Run(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	IsLeader(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Boolean, error)
}

type ravelNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewRavelNodeClient(cc grpc.ClientConnInterface) RavelNodeClient {
	return &ravelNodeClient{cc}
}

func (c *ravelNodeClient) Join(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/RavelClusterPB.RavelNode/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ravelNodeClient) Leave(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/RavelClusterPB.RavelNode/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ravelNodeClient) Run(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/RavelClusterPB.RavelNode/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ravelNodeClient) IsLeader(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/RavelClusterPB.RavelNode/IsLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RavelNodeServer is the server API for RavelNode service.
// All implementations should embed UnimplementedRavelNodeServer
// for forward compatibility
type RavelNodeServer interface {
	Join(context.Context, *Node) (*Void, error)
	Leave(context.Context, *Node) (*Void, error)
	Run(context.Context, *Command) (*Response, error)
	IsLeader(context.Context, *Void) (*Boolean, error)
}

// UnimplementedRavelNodeServer should be embedded to have forward compatible implementations.
type UnimplementedRavelNodeServer struct {
}

func (UnimplementedRavelNodeServer) Join(context.Context, *Node) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedRavelNodeServer) Leave(context.Context, *Node) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedRavelNodeServer) Run(context.Context, *Command) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedRavelNodeServer) IsLeader(context.Context, *Void) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLeader not implemented")
}

// UnsafeRavelNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RavelNodeServer will
// result in compilation errors.
type UnsafeRavelNodeServer interface {
	mustEmbedUnimplementedRavelNodeServer()
}

func RegisterRavelNodeServer(s grpc.ServiceRegistrar, srv RavelNodeServer) {
	s.RegisterService(&RavelNode_ServiceDesc, srv)
}

func _RavelNode_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RavelNodeServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RavelClusterPB.RavelNode/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RavelNodeServer).Join(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _RavelNode_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RavelNodeServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RavelClusterPB.RavelNode/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RavelNodeServer).Leave(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _RavelNode_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RavelNodeServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RavelClusterPB.RavelNode/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RavelNodeServer).Run(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _RavelNode_IsLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RavelNodeServer).IsLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RavelClusterPB.RavelNode/IsLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RavelNodeServer).IsLeader(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

// RavelNode_ServiceDesc is the grpc.ServiceDesc for RavelNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RavelNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RavelClusterPB.RavelNode",
	HandlerType: (*RavelNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _RavelNode_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _RavelNode_Leave_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _RavelNode_Run_Handler,
		},
		{
			MethodName: "IsLeader",
			Handler:    _RavelNode_IsLeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/ravel_node/ravel_node.proto",
}
